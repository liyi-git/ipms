<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"
	default-lazy-init="false">
	<description>Spring DAO 层配置</description>
	
	<!-- :::::: BEGIN 事务配置 :::::: -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*"   propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception" />
			<tx:method name="find*"   read-only="true" />
            <tx:method name="select*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config >
		<aop:pointcut id="smMethod" expression="execution(* *..service*..*(..))"/>
		<aop:advisor advice-ref="txAdvice" pointcut-ref="smMethod"/>
	</aop:config>
	<!-- :::::: END 事务配置 :::::: -->
	

	<!-- :::::::::::::BEGIN MyBatis配置 ::::::::::::: -->
	<!-- 数据库类型定义,用于mapper文件中可判断数据库类型 -->
	<bean id="vendorProperties"
		class="org.springframework.beans.factory.config.PropertiesFactoryBean">
		<property name="properties">
			<props>
				<prop key="DB2">db2</prop>
				<prop key="Oracle">oracle</prop>
				<prop key="MySQL">mysql</prop>
			</props>
		</property>
	</bean>
	<!-- 支持multi-db适应多种数据库 -->
	<bean id="databaseIdProvider" class="org.apache.ibatis.mapping.VendorDatabaseIdProvider">
		<property name="properties" ref="vendorProperties" />
	</bean>	
	<!--typeAliases 扫描包定义 -->
	<bean id="typeAliasesPackageProp" class="com.langnatech.core.extend.TypeAliasesPackagePropExtend">
		<property name="typeAliasesPackages">
			<list>
				<value>com.langnatech.**.entity</value>
				<value>com.langnatech.**.bean</value>
			</list>
		</property>
		<property name="rootPackage" value="com/langnatech/" />
	</bean>
	<!-- 基础配置库SessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:conf/mybatis/mybatis-config.xml" />
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<property name="typeAliasesPackage" ref="typeAliasesPackageProp"/>
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath*:conf/mybatis/**/*Mapper.xml" />
		<property name="typeAliasesSuperType" value="com.langnatech.core.base.entity.IEntity" />
		<!-- SQL的*Mapper.xml中公共配置参数-->
		<property name="configurationProperties">
			<props>
				<prop key="SCHEMA_BASE">${ipms.ds.schema}</prop>
			</props>	
		</property> 
	</bean>
	<!-- Mybatis Repository 扫描定义 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.langnatech.**.dao" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- 注入session工厂，可直接使用sqlsession -->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<!-- 注入  jdbcTemplate -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- 获取当前数据库连接类型 -->
	<bean id="databaseProviderUtil" class="com.langnatech.util.DatabaseProviderUtil">
		<property name="dataSource" ref="dataSource" />
		<property name="databaseIdProvider" ref="databaseIdProvider" />
	</bean>
	<!-- ::::::::::::: MyBatis配置 END::::::::::::: -->
	
	<!-- :::::: BEGIN   数据源配置 :::::: -->
	<bean id="dataSourceSpied" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.ipms.driverClass}" />
		<property name="url" value="${jdbc.ipms.url}" />
		<property name="username" value="${jdbc.ipms.username}" />
		<property name="password" value="${jdbc.ipms.password}" />
		<property name="defaultAutoCommit" value="false" />
	</bean>
	<!--log4jdbc-remix 日志输出跟踪 -->
	<bean id="dataSource" class="net.sf.log4jdbc.Log4jdbcProxyDataSource">
		<constructor-arg ref="dataSourceSpied" />
		<property name="logFormatter">
			<bean class="net.sf.log4jdbc.tools.Log4JdbcCustomFormatter">
				<property name="loggingType" value="SINGLE_LINE" />
				<property name="margin" value="2" />
				<property name="sqlPrefix" value="SQL:::" />
			</bean>
		</property>
	</bean>
	<!--
		<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
			<property name="jndiName">
				<value>${jndi.prefix}${jndi.ds.ipms}</value>
			</property>
		</bean>
		-->
	<!-- :::::: END 数据源配置 :::::: -->
</beans>